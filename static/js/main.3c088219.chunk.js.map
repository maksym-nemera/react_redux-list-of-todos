{"version":3,"sources":["types/StatusFilter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["StatusFilter","actions","todo","type","payload","currentTodoReducer","state","action","todoFilter","query","initialState","status","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","className","map","id","completed","title","isSelected","cn","onClick","currentTodoActions","setTodo","TodoFilter","filterQuery","onChange","event","filterActions","target","value","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","curUser","href","email","name","App","isLoading","setIsLoading","allTodos","filterStatus","dispatchTodo","todosFromServer","allTodoActions","finally","visibleTodos","matchesQuery","toLowerCase","trim","includes","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c088219.chunk.js","sourcesContent":["export enum StatusFilter {\n  All = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { StatusFilter } from '../types/StatusFilter';\n\ntype SetFilterAction = {\n  type: 'statusFilter/SET';\n  payload: StatusFilter;\n};\n\ntype SetQueryAction = {\n  type: 'todoQuery/SET';\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: 'todoQuery/CLEAR';\n};\n\nconst setTodoFilter = (\n  todoFilter: StatusFilter,\n): SetFilterAction => ({\n  type: 'statusFilter/SET',\n  payload: todoFilter,\n});\n\nconst setTodoQuery = (\n  query: string,\n): SetQueryAction => ({\n  type: 'todoQuery/SET',\n  payload: query,\n});\n\nconst clearTodoQuery = (): ClearQueryAction => ({\n  type: 'todoQuery/CLEAR',\n});\n\nexport const actions = {\n  setTodoFilter,\n  setTodoQuery,\n  clearTodoQuery,\n};\n\ntype State = {\n  query: string;\n  status: StatusFilter;\n};\n\nconst initialState: State = {\n  query: '',\n  status: StatusFilter.All,\n};\n\ntype Action = SetFilterAction | SetQueryAction | ClearQueryAction;\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'statusFilter/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'todoQuery/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'todoQuery/CLEAR':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype GetTodoAction = {\n  type: 'allTodo/GET';\n  payload: Todo[];\n};\n\nconst getTodos = (todos: Todo[]): GetTodoAction => ({\n  type: 'allTodo/GET',\n  payload: todos,\n});\n\nexport const actions = { getTodos };\n\ntype State = Todo[];\ntype Action = GetTodoAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'allTodo/GET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const setTodo = (todo: Todo) => dispatch(\n    currentTodoActions.setTodo(todo),\n  );\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            completed,\n            title,\n          } = todo;\n\n          const isSelected = id === currentTodo?.id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              {completed\n                ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"is-vcentered\" />\n                )}\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={cn({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye-slash': isSelected,\n                      'fa-eye': !isSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent } from 'react';\nimport { StatusFilter } from '../../types/StatusFilter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const filterQuery = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const changeFilterStatus = (\n    event: ChangeEvent<HTMLSelectElement>,\n  ) => dispatch(\n    filterActions.setTodoFilter(event.target.value as StatusFilter),\n  );\n\n  const changeFilterQuery = (\n    event: ChangeEvent<HTMLInputElement>,\n  ) => dispatch(\n    filterActions.setTodoQuery(event.target.value),\n  );\n\n  const clearQuery = () => dispatch(\n    filterActions.clearTodoQuery(),\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={changeFilterStatus}\n          >\n            <option value={StatusFilter.All}>All</option>\n            <option value={StatusFilter.ACTIVE}>Active</option>\n            <option value={StatusFilter.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterQuery.query}\n          onChange={changeFilterQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filterQuery.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(curUser => {\n          setUser(curUser);\n        });\n    }\n  }, []);\n\n  if (!currentTodo) {\n    return null;\n  }\n\n  const {\n    completed,\n    id,\n    title,\n  } = currentTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setUser(null);\n                removeTodo();\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { StatusFilter } from './types/StatusFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as allTodoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const allTodos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filterStatus = useAppSelector(state => state.filter);\n\n  const dispatchTodo = useAppDispatch();\n\n  const getTodo = (todos: Todo[]) => dispatchTodo(\n    allTodoActions.getTodos(todos),\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos().then(todosFromServer => {\n      getTodo(todosFromServer);\n    })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const visibleTodos = allTodos.filter(todo => {\n    const matchesQuery = todo.title.toLowerCase().trim()\n      .includes(filterStatus.query.toLowerCase().trim());\n\n    switch (filterStatus.status) {\n      case StatusFilter.All:\n        return todo && matchesQuery;\n\n      case StatusFilter.COMPLETED:\n        return todo.completed && matchesQuery;\n\n      case StatusFilter.ACTIVE:\n        return !todo.completed && matchesQuery;\n\n      default:\n        throw new Error(`Wrong filter, ${filterStatus.status} is not defined`);\n    }\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList\n                    todos={visibleTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}